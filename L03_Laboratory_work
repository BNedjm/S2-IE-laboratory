#include <iostream>
#include <SFML/Window.hpp>
#include <SFML/Graphics.hpp>

int main() {
    //Var declaration
    float rectangle_velocity_x = 50;
    float rectangle_velocity_y = 150;
    float rectangle_angular_velocity = 10;

    // create the window
    sf::RenderWindow window(sf::VideoMode(800, 600), "My window");

    // create some shapes
    sf::CircleShape circle(100.0);
    circle.setPosition(100.0, 300.0);
    circle.setFillColor(sf::Color(100, 250, 50));

    sf::RectangleShape rectangle(sf::Vector2f(120.0, 60.0));
    rectangle.setPosition(500.0, 400.0);
    rectangle.setFillColor(sf::Color(100, 50, 250));

    sf::RectangleShape rectangle_1(sf::Vector2f(10.0, 60.0));
    rectangle_1.setPosition(300.0, 200.0);
    rectangle_1.setFillColor(sf::Color(100, 50, 250));

    sf::ConvexShape triangle;
    triangle.setPointCount(3);
    triangle.setPoint(0, sf::Vector2f(0.0, 0.0));
    triangle.setPoint(1, sf::Vector2f(0.0, 200.0));
    triangle.setPoint(2, sf::Vector2f(140.0, 40.0));
    triangle.setOutlineColor(sf::Color::Red);
    triangle.setOutlineThickness(5);
    triangle.setPosition(600.0, 100.0);

    //Clock declaration
    sf::Clock clock;
    sf::Time elapsed;
    float delay_x, delay_y;

    // run the program as long as the window is open
    while (window.isOpen()) {

        // check all the window's events that were triggered since the last iteration of the loop
        sf::Event event;
        while (window.pollEvent(event)) {
            // "close requested" event: we close the window
            if (event.type == sf::Event::Closed)
                window.close();
        }

        // collusion detect.
        sf::FloatRect rectangle_bounds = rectangle.getGlobalBounds();
        std::cout << rectangle_bounds.top << " " << rectangle_bounds.left << " " ;
        std::cout << rectangle_bounds.width << " " << rectangle_bounds.height << std::endl;

        // moving objects
        rectangle.move(rectangle_velocity_x*elapsed.asSeconds(),rectangle_velocity_y*elapsed.asSeconds());
        rectangle.rotate(rectangle_angular_velocity*elapsed.asSeconds());

        if ((rectangle_bounds.top <= 0 || rectangle_bounds.top+rectangle_bounds.height >= window.getSize().y) && delay_y <= 0){
            rectangle_velocity_y = -rectangle_velocity_y;
            rectangle.setFillColor(sf::Color(rand() % 255, rand() % 255, rand() % 255));
            delay_y = 25;
        }
        else if ((rectangle_bounds.left <= 0 || rectangle_bounds.left+rectangle_bounds.width >= window.getSize().x) && delay_x <= 0){
            rectangle_velocity_x = -rectangle_velocity_x;
            rectangle.setFillColor(sf::Color(rand() % 255, rand() % 255, rand() % 255));
            delay_x = 25;
        }
        delay_x--;
        delay_y--;

        // colors
        //rectangle.setFillColor(sf::Color(255, 255, 0));

        // clear the window with black color
        window.clear(sf::Color::Black);

        // draw everything here...
        window.draw(circle);
        window.draw(rectangle);
        window.draw(rectangle_1);
        window.draw(triangle);

        // end the current frame
        window.display();

        elapsed = clock.restart();
        std::cout << elapsed.asMicroseconds() << "\t" << 1/elapsed.asSeconds() << std::endl;
    }

    return 0;
}
