#include <iostream>
#include <vector>
#include <algorithm>
#include <numeric>
#include <iomanip>

#include <SFML/Window.hpp>
#include <SFML/Graphics.hpp>

class Labyrinth  : public sf::Sprite {
public:
    void setSpeed(int xspeed, int yspeed)
     {
      m_speed_x = xspeed;
      m_speed_y = yspeed;
     }

    void setBounds(int left, int right, int top, int bottom)
     {
      bound_top = top;
      bound_bottom = bottom;
      bound_right = right;
      bound_left = left;
     }


    /*void moveInDirection(const sf::Time &elapsed, const sf::Keyboard::Key &key, int &ind){
        float dt = elapsed.asSeconds();
        bool up = false, down = false, left = false, right = false;
        int x = 0, y = 0;

        //--------------------------------------------------------------------------
        // I added this section for the sake of diagonal motion
        if(sf::Keyboard::isKeyPressed(sf::Keyboard::Up) && sf::Keyboard::isKeyPressed(sf::Keyboard::Right)){
            if(getGlobalBounds().left+getGlobalBounds().width <= r_bound_ && getGlobalBounds().top >= u_bound_){
                right = true;
                up = true;
            }
        } else if (sf::Keyboard::isKeyPressed(sf::Keyboard::Up) && sf::Keyboard::isKeyPressed(sf::Keyboard::Left)){
            if(getGlobalBounds().left >= l_bound_ && getGlobalBounds().top >= u_bound_){
                left = true;
                up = true;
            }
        }
        if(sf::Keyboard::isKeyPressed(sf::Keyboard::Down) && sf::Keyboard::isKeyPressed(sf::Keyboard::Right)){
            if(getGlobalBounds().left+getGlobalBounds().width <= r_bound_ && getGlobalBounds().top+getGlobalBounds().height <= d_bound_){
                right = true;
                down = true;
            }
        } else if (sf::Keyboard::isKeyPressed(sf::Keyboard::Down) && sf::Keyboard::isKeyPressed(sf::Keyboard::Left)){
            if(getGlobalBounds().left >= l_bound_ && getGlobalBounds().top+getGlobalBounds().height <= d_bound_){
                left = true;
                down = true;
            }
        }
        //--------------------------------------------------------------------------
        switch (ind) {
        case 1:
            up = false;
            break;
        case 2:
            down = false;
            break;
        case 3:
            left = false;
            break;
        case 4:
            right = false;
            break;
        default:
            break;
        }
        //--------------------------------------------------------------------------
        if (left)
            x-=x_speed_;
        if (right)
            x+=x_speed_;
        if (up)
            y-=y_speed_;
        if (down)
            y+=y_speed_;
        move(x*dt,y*dt);
    }*/

    void moveInDirection(const sf::Time &elapsed, const sf::Keyboard::Key &key, const std::vector<Labyrinth> &obstacles)
     {
      sf::FloatRect rectangle_bounds = getGlobalBounds();
      bool top=0, left=0, bottom=0, right=0;


      for(auto &obstacle : obstacles)
      {
       if(Collision_T(obstacle) == 1){top = 1;}
       if(Collision_L(obstacle) == 1){left = 1;}
       if(Collision_B(obstacle) == 1){bottom = 1;}
       if(Collision_R(obstacle) == 1){right = 1;}
      }


      if(sf::Keyboard::isKeyPressed(sf::Keyboard::Up) && rectangle_bounds.top > bound_top && bottom != true)
       {
        move(0, -m_speed_y*elapsed.asSeconds());
       }

      if(sf::Keyboard::isKeyPressed(sf::Keyboard::Down) && rectangle_bounds.top+rectangle_bounds.height < bound_bottom && top != true)
       {
        move(0, m_speed_y*elapsed.asSeconds());
       }

      if(sf::Keyboard::isKeyPressed(sf::Keyboard::Right) && rectangle_bounds.left + rectangle_bounds.width < bound_right && left != true)
       {
        move(m_speed_x*elapsed.asSeconds(), 0);
       }

      if(sf::Keyboard::isKeyPressed(sf::Keyboard::Left) && rectangle_bounds.left > bound_left && right != true)
       {
        move(-m_speed_x*elapsed.asSeconds(), 0);
       }
      //--------------------------------------------------------------------------
      // I added this section for the sake of diagonal motion
      if(sf::Keyboard::isKeyPressed(sf::Keyboard::Up) && rectangle_bounds.top > bound_top && bottom != true
         && sf::Keyboard::isKeyPressed(sf::Keyboard::Right) && rectangle_bounds.left + rectangle_bounds.width < bound_right && left != true){
          move(m_speed_x*elapsed.asSeconds(), -m_speed_y*elapsed.asSeconds()); //up-right
      } else if (sf::Keyboard::isKeyPressed(sf::Keyboard::Up) && rectangle_bounds.top > bound_top && bottom != true
                 && sf::Keyboard::isKeyPressed(sf::Keyboard::Left) && rectangle_bounds.left > bound_left && right != true){
          move(-m_speed_x*elapsed.asSeconds(), -m_speed_y*elapsed.asSeconds()); //up-left
      }
      if(sf::Keyboard::isKeyPressed(sf::Keyboard::Down) && rectangle_bounds.top+rectangle_bounds.height < bound_bottom && top != true
         && sf::Keyboard::isKeyPressed(sf::Keyboard::Right) && rectangle_bounds.left + rectangle_bounds.width < bound_right && left != true){
          move(m_speed_x*elapsed.asSeconds(), m_speed_y*elapsed.asSeconds()); //down-right
      } else if (sf::Keyboard::isKeyPressed(sf::Keyboard::Down) && rectangle_bounds.top+rectangle_bounds.height < bound_bottom && top != true
                 && sf::Keyboard::isKeyPressed(sf::Keyboard::Left) && rectangle_bounds.left > bound_left && right != true){
          move(-m_speed_x*elapsed.asSeconds(), m_speed_y*elapsed.asSeconds()); //down-left
      }
     }

    bool Collision_T(sf::Sprite wall)
     {
      sf::FloatRect guy_bounds = getGlobalBounds();
      sf::FloatRect wall_bounds = wall.getGlobalBounds();

      if ((guy_bounds.top+guy_bounds.height >= wall_bounds.top-3) && (guy_bounds.top < wall_bounds.top)
      && (guy_bounds.left+guy_bounds.width > wall_bounds.left+3) && (guy_bounds.left < wall_bounds.left+wall_bounds.width-3))
       {
        return 1;
       }
      else{return 0;}
     }

    bool Collision_R(sf::Sprite wall)
     {
      sf::FloatRect guy_bounds = getGlobalBounds();
      sf::FloatRect wall_bounds = wall.getGlobalBounds();

      if ((guy_bounds.left <= wall_bounds.left+wall_bounds.width+3) && (guy_bounds.left+guy_bounds.width > wall_bounds.left+wall_bounds.width)
       && (guy_bounds.top+guy_bounds.height > wall_bounds.top+3) && (guy_bounds.top < wall_bounds.top+wall_bounds.height-3))
       {
        return 1;
       }
      else{return 0;}
     }

    bool Collision_B(sf::Sprite wall)
     {
      sf::FloatRect guy_bounds = getGlobalBounds();
      sf::FloatRect wall_bounds = wall.getGlobalBounds();

      if ((guy_bounds.top <= wall_bounds.top + wall_bounds.height+3) && (guy_bounds.top+guy_bounds.height > wall_bounds.top+wall_bounds.height)
       && (guy_bounds.left+guy_bounds.width > wall_bounds.left+3) && (guy_bounds.left < wall_bounds.left+wall_bounds.width-3))
       {
        return 1;
       }
      else{return 0;}
     }

    bool Collision_L(sf::Sprite wall)
     {
      sf::FloatRect guy_bounds = getGlobalBounds();
      sf::FloatRect wall_bounds = wall.getGlobalBounds();

      if ((guy_bounds.left+guy_bounds.width >= wall_bounds.left-3) && (guy_bounds.left < wall_bounds.left)
       && (guy_bounds.top+guy_bounds.height > wall_bounds.top+3) && (guy_bounds.top < wall_bounds.top+wall_bounds.height-3))
       {
        return 1;
       }
      else{return 0;}
     }

private:
    int m_speed_x = 200;
    int m_speed_y = 200;
    int bound_top = 0;
    int bound_bottom = 0;
    int bound_left = 0;
    int bound_right = 0;
};

int main()
{
    sf::RenderWindow window(sf::VideoMode(800, 800), "Labyrinth"); // create the window

    sf::Clock clock;

    // create textures
    sf::Texture texture_grass, texture_wall, texture_guy;
    sf::Vector2f pos_ = {0,0}, sc_ = {.5,.5};

    //------------------------------------------------------------------

    Labyrinth grass;
    if (!texture_grass.loadFromFile("grass.png")) {
        std::cerr << "Could not load texture" << std::endl;
        return 1;
    }
    texture_grass.setRepeated(true);
    grass.setTexture(texture_grass);
    grass.setScale(.5,.5);
    grass.setTextureRect(sf::IntRect(0, 0, window.getSize().x/sc_.x, window.getSize().y/sc_.y));

    //------------------------------------------------------------------

    Labyrinth wall;
    std::vector<Labyrinth> walls;

    if (!texture_wall.loadFromFile("wall.png")) {
        std::cerr << "Could not load texture" << std::endl;
        return 1;
    }
    else{
        texture_wall.setRepeated(true);
        // cube walls
        wall.setTexture(texture_wall);
        wall.setScale(.5,.5);
        wall.setTextureRect(sf::IntRect(0, 0, window.getSize().x/sc_.x, 10/sc_.y));
        walls.push_back(wall);
        wall.setTextureRect(sf::IntRect(0, 0, window.getSize().x/sc_.x, 10/sc_.y));
        wall.setPosition(0, window.getSize().y-10);
        walls.push_back(wall);
        wall.setTextureRect(sf::IntRect(0, 0, 10/sc_.x, ((window.getSize().y-100)/sc_.y)));
        wall.setPosition(0, 10);
        walls.push_back(wall);
        wall.setTextureRect(sf::IntRect(0, 0, 10/sc_.x, ((window.getSize().y-100)/sc_.y)));
        wall.setPosition(window.getSize().x-10, 90);
        walls.push_back(wall);
        // puzzle walls
        // 1 y
        wall.setTextureRect(sf::IntRect(0, 0, 20/sc_.x, (100/sc_.y)));
        wall.setPosition(90, 10);
        walls.push_back(wall);
        wall.setTextureRect(sf::IntRect(0, 0, 20/sc_.x, (220/sc_.y)));
        wall.setPosition(90, 490);
        walls.push_back(wall);
        // 2 y
        wall.setTextureRect(sf::IntRect(0, 0, 20/sc_.x, (110/sc_.y)));
        wall.setPosition(190, 290);
        walls.push_back(wall);
        wall.setTextureRect(sf::IntRect(0, 0, 20/sc_.x, (300/sc_.y)));
        wall.setPosition(190, 490);
        walls.push_back(wall);
        // 3 y
        wall.setTextureRect(sf::IntRect(0, 0, 20/sc_.x, (120/sc_.y)));
        wall.setPosition(290, 90);
        walls.push_back(wall);
        wall.setTextureRect(sf::IntRect(0, 0, 20/sc_.x, (120/sc_.y)));
        wall.setPosition(290, 390);
        walls.push_back(wall);
        // 4 y
        wall.setTextureRect(sf::IntRect(0, 0, 20/sc_.x, (100/sc_.y)));
        wall.setPosition(390, 10);
        walls.push_back(wall);
        wall.setTextureRect(sf::IntRect(0, 0, 20/sc_.x, (220/sc_.y)));
        wall.setPosition(390, 190);
        walls.push_back(wall);
        wall.setTextureRect(sf::IntRect(0, 0, 20/sc_.x, (120/sc_.y)));
        wall.setPosition(390, 490);
        walls.push_back(wall);
        wall.setTextureRect(sf::IntRect(0, 0, 20/sc_.x, (100/sc_.y)));
        wall.setPosition(390, 690);
        walls.push_back(wall);
        // 5 y
        wall.setTextureRect(sf::IntRect(0, 0, 20/sc_.x, (220/sc_.y)));
        wall.setPosition(490, 290);
        walls.push_back(wall);
        wall.setTextureRect(sf::IntRect(0, 0, 20/sc_.x, (120/sc_.y)));
        wall.setPosition(490, 590);
        walls.push_back(wall);
        // 6 y
        wall.setTextureRect(sf::IntRect(0, 0, 20/sc_.x, (100/sc_.y)));
        wall.setPosition(590, 10);
        walls.push_back(wall);
        wall.setTextureRect(sf::IntRect(0, 0, 20/sc_.x, (120/sc_.y)));
        wall.setPosition(590, 390);
        walls.push_back(wall);
        wall.setTextureRect(sf::IntRect(0, 0, 20/sc_.x, (100/sc_.y)));
        wall.setPosition(590, 690);
        walls.push_back(wall);
        // 7 y
        wall.setTextureRect(sf::IntRect(0, 0, 20/sc_.x, (220/sc_.y)));
        wall.setPosition(690, 90);
        walls.push_back(wall);
        wall.setTextureRect(sf::IntRect(0, 0, 20/sc_.x, (320/sc_.y)));
        wall.setPosition(690, 390);
        walls.push_back(wall);
        // 1 x
        wall.setTextureRect(sf::IntRect(0, 0, 120/sc_.x, (20/sc_.y)));
        wall.setPosition(190, 90);
        walls.push_back(wall);
        wall.setTextureRect(sf::IntRect(0, 0, 220/sc_.x, (20/sc_.y)));
        wall.setPosition(490, 90);
        walls.push_back(wall);
        // 2 x
        wall.setTextureRect(sf::IntRect(0, 0, 520/sc_.x, (20/sc_.y)));
        wall.setPosition(90, 190);
        walls.push_back(wall);
        // 3 x
        wall.setTextureRect(sf::IntRect(0, 0, 300/sc_.x, (20/sc_.y)));
        wall.setPosition(10, 290);
        walls.push_back(wall);
        wall.setTextureRect(sf::IntRect(0, 0, 220/sc_.x, (20/sc_.y)));
        wall.setPosition(490, 290);
        walls.push_back(wall);
        // 4 x
        wall.setTextureRect(sf::IntRect(0, 0, 120/sc_.x, (20/sc_.y)));
        wall.setPosition(90, 390);
        walls.push_back(wall);
        wall.setTextureRect(sf::IntRect(0, 0, 120/sc_.x, (20/sc_.y)));
        wall.setPosition(290, 390);
        walls.push_back(wall);
        wall.setTextureRect(sf::IntRect(0, 0, 200/sc_.x, (20/sc_.y)));
        wall.setPosition(590, 390);
        walls.push_back(wall);
        // 5 x
        wall.setTextureRect(sf::IntRect(0, 0, 100/sc_.x, (20/sc_.y)));
        wall.setPosition(10, 490);
        walls.push_back(wall);
        wall.setTextureRect(sf::IntRect(0, 0, 120/sc_.x, (20/sc_.y)));
        wall.setPosition(190, 490);
        walls.push_back(wall);
        wall.setTextureRect(sf::IntRect(0, 0, 120/sc_.x, (20/sc_.y)));
        wall.setPosition(390, 490);
        walls.push_back(wall);
        // 6 x
        wall.setTextureRect(sf::IntRect(0, 0, 220/sc_.x, (20/sc_.y)));
        wall.setPosition(490, 590);
        walls.push_back(wall);
        wall.setTextureRect(sf::IntRect(0, 0, 120/sc_.x, (20/sc_.y)));
        wall.setPosition(290, 590);
        walls.push_back(wall);
        // 7 x
        wall.setTextureRect(sf::IntRect(0, 0, 120/sc_.x, (20/sc_.y)));
        wall.setPosition(290, 690);
        walls.push_back(wall);
    }

    //------------------------------------------------------------------

    Labyrinth guy;
    if (!texture_guy.loadFromFile("guy.png")) {
        std::cerr << "Could not load texture" << std::endl;
        return 1;
    }
    guy.setTexture(texture_guy);
    guy.setScale(.9,.9);
    guy.setPosition(20,720.0);
    guy.setBounds(0, window.getSize().x, 0, window.getSize().y);
    guy.setSpeed(100, 100);

    // run the program as long as the window is open
    while (window.isOpen()) {

        sf::Time elapsed = clock.restart();

        // check all the window's events that were triggered since the last iteration of the loop
        sf::Event event;
        while (window.pollEvent(event)) {
            // "close requested" event: we close the window
            if (event.type == sf::Event::Closed)
                window.close();
        }

        // clear the window with black color
        window.clear(sf::Color::Black);

        // draw everything here...
        window.draw(grass);
        for (auto &w : walls){
            window.draw(w);
        }
        window.draw(guy);
        guy.moveInDirection(elapsed, event.key.code, walls);

        // end the current frame
        window.display();
    }
    return 0;
}
