#include <iostream>
#include <SFML/Window.hpp>
#include <SFML/Graphics.hpp>

void create_shapes(std::vector<std::unique_ptr<sf::Drawable>> &shapes_vec) {

    std::unique_ptr<sf::Drawable> circle_ = std::make_unique<sf::CircleShape>(100.0);
    sf::CircleShape *circle = dynamic_cast<sf::CircleShape*>(circle_.get());
    circle->setPosition(100.0, 300.0);
    circle->setFillColor(sf::Color(100, 250, 50));
    shapes_vec.emplace_back(move(circle_));

    std::unique_ptr<sf::Drawable> triangle_ = std::make_unique<sf::ConvexShape>();
    sf::ConvexShape *triangle = dynamic_cast<sf::ConvexShape*>(triangle_.get());
    triangle->setPointCount(3);
    triangle->setPoint(0, sf::Vector2f(0.0, 0.0));
    triangle->setPoint(1, sf::Vector2f(0.0, 200.0));
    triangle->setPoint(2, sf::Vector2f(140.0, 40.0));
    triangle->setOutlineColor(sf::Color::Red);
    triangle->setOutlineThickness(5);
    triangle->setPosition(600.0, 100.0);
    shapes_vec.emplace_back(move(triangle_));


    std::unique_ptr<sf::Drawable> rectangle_ = std::make_unique<sf::RectangleShape>(sf::Vector2f(120.0, 60.0));
    sf::RectangleShape *rectangle = dynamic_cast<sf::RectangleShape*>(rectangle_.get());
    rectangle->setPosition(500.0, 400.0);
    rectangle->setFillColor(sf::Color(100, 50, 250));
    shapes_vec.emplace_back(move(rectangle_));

    std::unique_ptr<sf::Drawable> rectangle_1_ = std::make_unique<sf::RectangleShape>(sf::Vector2f(10.0, 60.0));
    sf::RectangleShape *rectangle_1 = dynamic_cast<sf::RectangleShape*>(rectangle_1_.get());
    rectangle_1->setPosition(300.0, 200.0);
    rectangle_1->setFillColor(sf::Color(100, 50, 250));
    shapes_vec.emplace_back(move(rectangle_1_));
}

int main() {

    // create the window
    sf::RenderWindow window(sf::VideoMode(800, 600), "My window");

    // create some shapes
    std::vector<std::unique_ptr<sf::Drawable>> shapes;
    create_shapes(shapes);

    // clock declaration
    sf::Clock clock;
    sf::Time elapsed;

    // variables declaration

    float rectangle_velocity_x = 50;
    float rectangle_velocity_y = 150;
    float rectangle_angular_velocity = 10;
    float delay_x = 0, delay_y = 0;

    // run the program as long as the window is open
    while (window.isOpen()) {

        // check all the window's events that were triggered since the last iteration of the loop
        sf::Event event;
        while (window.pollEvent(event)) {
            // "close requested" event: we close the window
            if (event.type == sf::Event::Closed)
                window.close();
        }

        sf::RectangleShape *rec_1 = dynamic_cast<sf::RectangleShape*>(shapes.at(2).get());

        // collusion detection
        sf::FloatRect rectangle_bounds = rec_1->getGlobalBounds();

        if ((rectangle_bounds.top+rectangle_bounds.height >= window.getSize().y) && delay_y <= 0){
            rectangle_velocity_y = -1*std::abs(rectangle_velocity_y);
            rec_1->setFillColor(sf::Color(rand() % 255, rand() % 255, rand() % 255));
            delay_y = 25;
        }
        else if (rectangle_bounds.top <= 0 && delay_y <= 0){
            rectangle_velocity_y = std::abs(rectangle_velocity_y);
            rec_1->setFillColor(sf::Color(rand() % 255, rand() % 255, rand() % 255));
            delay_y = 25;
        }
        else if (rectangle_bounds.left+rectangle_bounds.width >= window.getSize().x && delay_x <= 0){
            rectangle_velocity_x = -1*std::abs(rectangle_velocity_x);
            rec_1->setFillColor(sf::Color(rand() % 255, rand() % 255, rand() % 255));
            delay_x = 25;
        }
        else if (rectangle_bounds.left <= 0 && delay_x <= 0){
            rectangle_velocity_x = std::abs(rectangle_velocity_x);
            rec_1->setFillColor(sf::Color(rand() % 255, rand() % 255, rand() % 255));
            delay_x = 25;
        }
        delay_x--;
        delay_y--;

        // moving objects

        rec_1->move(rectangle_velocity_x*elapsed.asSeconds(),rectangle_velocity_y*elapsed.asSeconds());
        rec_1->rotate(rectangle_angular_velocity*elapsed.asSeconds());

        // clear the window with black color
        window.clear(sf::Color::Black);

        // draw everything here...
        for(auto &s : shapes) {
            window.draw(*s);
        }

        // end the current frame
        window.display();

        // clock
        elapsed = clock.restart();
    }

    return 0;
}
