#include <iostream>
#include <vector>
#include <algorithm>
#include <numeric>
#include <iomanip>
#include <cmath>
#include <string>
#include <sstream>

#include <SFML/Window.hpp>
#include <SFML/Graphics.hpp>

class Player : public sf::Sprite {
public:
    Player(const int& ref_speed, const std::string& path) : ref_speed_(ref_speed)
    {
        if (!texture_.loadFromFile(path)) {
            std::cerr << "Could not load texture" << std::endl;
        } else {
            texture_.setRepeated(true);
            setTexture(texture_);
            setTextureRect(sf::IntRect(0, 0, 80, 210));
            setOrigin(35, 165);
            setPosition(300, 750);
        }
    }

    void setSpeed(const int& ref_speed) {
        ref_speed_ = ref_speed;
    }

    void moveInDirection(const sf::Time &elapsed)
     {
        if(sf::Keyboard::isKeyPressed(sf::Keyboard::Right)){ // moving the player
            if(getRotation() <= 80 || abs(getRotation()-360) <= 90)
            rotate(abs(ref_speed_)*elapsed.asSeconds());
        } else if(sf::Keyboard::isKeyPressed(sf::Keyboard::Left)){
            if(getRotation() >= 280 || getRotation() <= 90)
            rotate(-abs(ref_speed_)*elapsed.asSeconds());
        }
     }

private:
    sf::Texture texture_;
    int ref_speed_ = 0;
};

class Objects : public sf::Sprite {
public:
    Objects(const std::string& path) //make an initializer list for fps_
    {
        if (!texture_.loadFromFile(path)) {
            std::cerr << "Could not load texture" << std::endl;
        }
        setTexture(texture_);
        setTextureRect(sf::IntRect(0, 0, 10, 10));
        setOrigin(5, 5);
        setPosition(300, 750);
    }

    void setSpeed(const int& x_speed, const int& y_speed) {
        x_speed_ = x_speed;
        y_speed_ = y_speed;
    }

    bool isMoving(){
        if (x_speed_!=0 || y_speed_!=0){
            moving_ = true;
        }
        return moving_;
    }

    void animate(const sf::Time elapsed){
        boom();
        move(x_speed_*elapsed.asSeconds(), y_speed_*elapsed.asSeconds());
    }

    void setBounds(const float& l_bound, const float& r_bound,const float& u_bound,const float& d_bound){
        l_bound_  = l_bound  ;
        r_bound_  = r_bound  ;
        u_bound_  = u_bound  ;
        d_bound_  = d_bound  ;
    }

    bool Collision_T(sf::Sprite wall)
     {
      sf::FloatRect guy_bounds = getGlobalBounds();
      sf::FloatRect wall_bounds = wall.getGlobalBounds();

      if ((guy_bounds.top+guy_bounds.height >= wall_bounds.top-3) && (guy_bounds.top < wall_bounds.top)
      && (guy_bounds.left+guy_bounds.width > wall_bounds.left+3) && (guy_bounds.left < wall_bounds.left+wall_bounds.width-3))
       {
          x_speed_ = 0;
          y_speed_ = 0;
          setPosition(300, 750);
          moving_ = false;
          return 1;
       }
      else{return 0;}
     }

    bool Collision_R(sf::Sprite wall)
     {
      sf::FloatRect guy_bounds = getGlobalBounds();
      guy_bounds.left += 20;
      sf::FloatRect wall_bounds = wall.getGlobalBounds();

      if ((guy_bounds.left <= wall_bounds.left+wall_bounds.width+3) && (guy_bounds.left+guy_bounds.width > wall_bounds.left+wall_bounds.width)
       && (guy_bounds.top+guy_bounds.height > wall_bounds.top+3) && (guy_bounds.top < wall_bounds.top+wall_bounds.height-3))
       {
          x_speed_ = 0;
          y_speed_ = 0;
          setPosition(300, 750);
          moving_ = false;
          return 1;
       }
      else{return 0;}
     }

    bool Collision_B(sf::Sprite wall)
     {
      sf::FloatRect guy_bounds = getGlobalBounds();
      sf::FloatRect wall_bounds = wall.getGlobalBounds();

      if ((guy_bounds.top <= wall_bounds.top + wall_bounds.height+3) && (guy_bounds.top+guy_bounds.height > wall_bounds.top+wall_bounds.height)
       && (guy_bounds.left+guy_bounds.width > wall_bounds.left+3) && (guy_bounds.left < wall_bounds.left+wall_bounds.width-3))
       {
          x_speed_ = 0;
          y_speed_ = 0;
          setPosition(300, 750);
          moving_ = false;
          return 1;
       }
      else{return 0;}
     }

    bool Collision_L(sf::Sprite wall)
     {
      sf::FloatRect guy_bounds = getGlobalBounds();
      sf::FloatRect wall_bounds = wall.getGlobalBounds();

      if ((guy_bounds.left+guy_bounds.width >= wall_bounds.left-3) && (guy_bounds.left < wall_bounds.left)
       && (guy_bounds.top+guy_bounds.height > wall_bounds.top+3) && (guy_bounds.top < wall_bounds.top+wall_bounds.height-3))
       {
          x_speed_ = 0;
          y_speed_ = 0;
          setPosition(300, 750);
          moving_ = false;
          return 1;
       }
      else{return 0;}
     }

private:
    sf::Texture texture_;
    int x_speed_ = 0 ;
    int y_speed_ = 0 ;
    float l_bound_ = 0;
    float r_bound_ = 0;
    float u_bound_ = 0;
    float d_bound_ = 0;
    bool moving_ = false;

    void boom(){
        sf::FloatRect rectangle_bounds = getGlobalBounds();
        if(rectangle_bounds.top <= u_bound_ || rectangle_bounds.top + rectangle_bounds.height >= d_bound_
              || rectangle_bounds.left <= l_bound_ || rectangle_bounds.left + rectangle_bounds.width >= r_bound_){
            x_speed_ = 0;
            y_speed_ = 0;
            setPosition(300, 750);
            moving_ = false;
        }
    }
};

class Target : public sf::Sprite {
public:
    Target(const int x_speed) : x_speed_(x_speed)
    {
    }

    void setSpeed(const int& x_speed) { // set x speed
        x_speed_ = x_speed;
    }

    void animate(const sf::Time &elapsed){ // move elements
        bouncce();
        move(x_speed_*elapsed.asSeconds(),0);
    }

    void setBounds(const float& l_bound, const float& r_bound){ // set bounds
        l_bound_  = l_bound;
        r_bound_  = r_bound;
    }

private:
    int x_speed_ = 0;
    float l_bound_ = 0;
    float r_bound_ = 0;

    void bouncce(){ // bounds to speed function
        sf::FloatRect rectangle_bounds = getGlobalBounds();

        if(rectangle_bounds.left <= l_bound_ ){
           x_speed_ = abs(x_speed_);
        }

        if(rectangle_bounds.left + rectangle_bounds.width >= r_bound_){
            x_speed_ = abs(x_speed_) * -1;
        }
    }
};

int main()
{
    sf::RenderWindow window(sf::VideoMode(600, 800), "Project X"); // create the window

    sf::Clock clock;

    sf::Texture tex_target, tex_player_bg, tex_bg;

    //----------------------------------------------------------------------------------
    sf::Font font;
    std::vector <sf::Text> texts;
        if (!font.loadFromFile("C:\\Users\\boukh\\OneDrive\\Bureau\\AGENCYB.TTF"))
        {
            std::cerr << "Could not load font" << std::endl;
            return 1;
        } else {
            for (int j = 0; j < 6; j++){
                sf::Text text;
                text.setFont(font);
                text.setCharacterSize(24);
                text.setFillColor(sf::Color::Red);
                text.setStyle(sf::Text::Bold);
                texts.push_back(text);
            }
        }

    texts.at(0).setPosition(150,750);
    texts.at(3).setPosition(50,750);
    texts.at(3).setString("SCORE : ");
    texts.at(1).setPosition(50,700);
    texts.at(1).setString("PLAYER  001");
    texts.at(2).setPosition(50,700);
    texts.at(2).setString("PLAYER  002");
    //----------------------------------------------------------------------------------

    int ref_speed = 25;

    // functional elements

    std::vector <Target> targets; // targets vector def
    if (!tex_target.loadFromFile("C:\\Users\\boukh\\OneDrive\\Bureau\\target4.png")) {
        std::cerr << "Could not load texture" << std::endl;
        return 1;
    } else {
        tex_target.setRepeated(true);
        for (int i = 1; i < 6; i++){
            Target target(i*ref_speed); // target elements def
            target.setTexture(tex_target);
            target.setBounds(0, window.getSize().x);
            target.setScale(.025,.05);
            target.setPosition(10,-20+i*30);
            target.setTextureRect(sf::IntRect(0, 0, 20*i/.025, 20/.05));
            targets.push_back(target);
        }
    }
    targets.at(0).setSpeed(40); // set speed for the smallest target

    Player player(50, "C:\\Users\\boukh\\OneDrive\\Bureau\\shot.png"); // Player def

    Objects rocket("C:\\Users\\boukh\\OneDrive\\Bureau\\grass.png"); // Rocket def
    rocket.setBounds(0, window.getSize().x,0,window.getSize().y);
    std::vector <Objects> rockets;
    for (int i=0; i<5; i++ ){
        rockets.push_back(rocket);
    }

    // non functional elements

    sf::Sprite player_bg, bg;
    if (!tex_player_bg.loadFromFile("C:\\Users\\boukh\\OneDrive\\Bureau\\tank.png")) {
        std::cerr << "Could not load texture" << std::endl;
        return 1;
    } else {
        player_bg.setTexture(tex_player_bg);
        player_bg.setPosition(249,652);
    }

    if (!tex_bg.loadFromFile("C:\\Users\\boukh\\OneDrive\\Bureau\\bg.png")) {
        std::cerr << "Could not load texture" << std::endl;
        return 1;
    } else {
        tex_bg.setRepeated(true);
        bg.setScale(.15, .15);
        bg.setTexture(tex_bg);
        bg.setTextureRect(sf::IntRect(0, 0, window.getSize().x/.15, window.getSize().y/.15));
    }

    int count = 0, score_1 = 0, score_2 = 0;

    while (window.isOpen()) {

        sf::Time elapsed = clock.restart();
        sf::Event event;

        while (window.pollEvent(event)) {
            if (event.type == sf::Event::Closed)
                window.close();
        }
        window.clear(sf::Color::Black);

        player.moveInDirection(elapsed);

        window.draw(bg);
        window.draw(player_bg);

        if(count < 5 && count != 0){
            if(sf::Keyboard::isKeyPressed(sf::Keyboard::Space) && !rockets.at(count-1).isMoving()){
                rockets.at(count).setSpeed(static_cast<int>(200*sin(player.getRotation()*M_PI/180)), -static_cast<int>(200*cos(player.getRotation()*M_PI/180)));
                count++;
            }

        }else if (count == 0){
            if(sf::Keyboard::isKeyPressed(sf::Keyboard::Space)){
                rockets.at(count).setSpeed(static_cast<int>(200*sin(player.getRotation()*M_PI/180)), -static_cast<int>(200*cos(player.getRotation()*M_PI/180)));
                count++;
            }
        }

        if(count!=0){
            for (int k=4; k>=0; k--){
                if (rockets.at(count-1).Collision_B(targets.at(k)) || rockets.at(count-1).Collision_T(targets.at(k))
                        || rockets.at(count-1).Collision_R(targets.at(k)) || rockets.at(count-1).Collision_L(targets.at(k))){
                    score_1+=(5-k);
                }
            }
        }

        for(auto &r : rockets){ // moving the rockets
            r.animate(elapsed);
            window.draw(r);
        }

        window.draw(player);

        for(auto &t : targets){ // moving the targets
            t.animate(elapsed);
            window.draw(t);
        }

        std::stringstream ss;
        ss << score_1;
          texts.at(0).setString( ss.str().c_str() );


        for(auto &x : texts){ // drawing the texts
            window.draw(x);
        }

        window.display();
    }

    return 0;
}
