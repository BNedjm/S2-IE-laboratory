#include <iostream>

#include <SFML/Window.hpp>
#include <SFML/Graphics.hpp>

class CustomRectangleShape : public sf::RectangleShape {
public:
    CustomRectangleShape(const sf::Vector2f &size, const sf::Vector2f &position) : sf::RectangleShape(size)
    {
        setPosition(position);
    }

    void setSpeed(const int& x_speed, const int& y_speed, const int & ro_speed) {
        x_speed_ = x_speed;
        y_speed_ = y_speed;
        ro_speed_ = ro_speed;
    }

    void animate(const sf::Time &elapsed){
        bouncce();
        float dt = elapsed.asSeconds();
        move(x_speed_*dt,y_speed_*dt);
        //rotate(ro_speed_*dt);
    }

    void setBounds(const float& l_bound, const float& r_bound,const float& u_bound,const float& d_bound){
        l_bound_  = l_bound  ;
        r_bound_  = r_bound  ;
        u_bound_  = u_bound  ;
        d_bound_  = d_bound  ;
    }

    void moveInDirection(const sf::Time &elapsed, const sf::Keyboard::Key &key){
        float dt = elapsed.asSeconds();
        if(key == sf::Keyboard::Right){
            if(getGlobalBounds().left+getGlobalBounds().width <= r_bound_)
            move(abs(x_speed_)*dt,0);
        }else if (key == sf::Keyboard::Left){
            if(getGlobalBounds().left >= l_bound_)
            move(-abs(x_speed_)*dt,0);
        }else if (key == sf::Keyboard::Up){
            if(getGlobalBounds().top >= u_bound_)
            move(0, -abs(y_speed_)*dt);
        }else if (key == sf::Keyboard::Down){
            if(getGlobalBounds().top+getGlobalBounds().height <= d_bound_)
                move(0, abs(x_speed_)*dt);
        }
    }

    bool isClicked(sf::Vector2i &mouse_position) const{
        if(mouse_position.x >= getGlobalBounds().left && mouse_position.x <= getGlobalBounds().left+getGlobalBounds().width
                && mouse_position.y >= getGlobalBounds().top && mouse_position.y <= getGlobalBounds().top+getGlobalBounds().height){
            return true;
        }
    }

    void isSelected(const bool &selected){
        selected_ = selected;
    }

    bool isitSelected(){
        return selected_;
    }

private:
    int x_speed_ = 0 ;
    int y_speed_ = 0 ;
    int ro_speed_ = 0 ;
    float l_bound_ = 0;
    float r_bound_ = 0;
    float u_bound_ = 0;
    float d_bound_ = 0;
    bool selected_ = false;

    void bouncce(){
        sf::FloatRect rectangle_bounds = getGlobalBounds();

        if(rectangle_bounds.top <= u_bound_){
            y_speed_ = abs(y_speed_);
        }

        if(rectangle_bounds.top + rectangle_bounds.height >= d_bound_){
            y_speed_ = abs(y_speed_) * -1;
            setFillColor(sf::Color(rand() % 256, rand() % 256, rand() % 256));
        }

        if(rectangle_bounds.left <= l_bound_ ){
           x_speed_ = abs(x_speed_);
           setFillColor(sf::Color(rand() % 256, rand() % 256, rand() % 256));
        }

        if(rectangle_bounds.left + rectangle_bounds.width >= r_bound_){
            x_speed_ = abs(x_speed_) * -1;
            setFillColor(sf::Color(rand() % 256, rand() % 256, rand() % 256));
        }
    }
};

int main() {
    // create the window
    sf::RenderWindow window(sf::VideoMode(800, 600), "My window");

    // create some shapes
    std::srand(std::time(nullptr));
    std::vector<CustomRectangleShape> rectangles;

    for(int i=0; i<10; i++)
    {
        sf::Vector2f size(120.0, 60.0);
        sf::Vector2f position(std::rand() % (window.getSize().x - 120), std::rand() % (window.getSize().y - 60));
        rectangles.emplace_back(CustomRectangleShape(size, position));
    }

    for(auto &rec : rectangles)
    {
        rec.setFillColor(sf::Color(0, 255, 0));
        rec.setBounds(0, window.getSize().x, 0, window.getSize().y);
        rec.setSpeed(100, 200, 10);
    }

    sf::Clock clock;

    // run the program as long as the window is open
    while (window.isOpen()) {

        sf::Time elapsed = clock.restart();
        float dt = elapsed.asSeconds();

        // check all the window's events that were triggered since the last iteration of the loop
        sf::Event event;
        sf::Vector2i is_ = {event.mouseButton.x,event.mouseButton.y};

        while (window.pollEvent(event)) {
            // "close requested" event: we close the window
            if (event.type == sf::Event::Closed)
                window.close();
        }

        for(auto &rec : rectangles)
            {
            if(event.mouseButton.button == sf::Mouse::Left && rec.isClicked(is_)){
                for(auto &rec : rectangles){
                    rec.isSelected(false);
                    rec.setFillColor(sf::Color(0, 255, 0));
                }
                rec.isSelected(true);
                rec.setFillColor(sf::Color(255, 0, 0));
            }
            }
        // clear the window with black color
        window.clear(sf::Color::Black);

        // draw everything here...
        for(auto &rec : rectangles)
            {
            if(rec.isitSelected())
                rec.moveInDirection(elapsed, event.key.code);
            window.draw(rec);
            }

        // end the current frame
        window.display();
    }

    return 0;
}
