#include <iostream>
#include <vector>
#include <algorithm>
#include <numeric>
#include <iomanip>
#include <cmath>

#include <SFML/Window.hpp>
#include <SFML/Graphics.hpp>

class AnimatedSprite : public sf::Sprite {
public:
    AnimatedSprite(const int fps, const std::string& path) : fps_(fps) //make an initializer list for fps_
    {

        //load the texture here
        if (!texture_.loadFromFile(path)) {
            std::cerr << "Could not load texture" << std::endl;
        }
        //set Texture
        setTexture(texture_);
        setTextureRect(sf::IntRect(50, 0, 50, 37));
    }

    void setSpeed(const int& x_speed, const int& y_speed, const int & ro_speed) {
        x_speed_ = x_speed;
        y_speed_ = y_speed;
        ro_speed_ = ro_speed;
    }

    void fall(const sf::Time &elapsed){
        float dt = elapsed.asSeconds();
        int g = 10;
        t_falling += dt;
        //move(0, 0.5 * g * pow(t_falling,2));
        var_y_speed_ += 0.5 * g * pow(t_falling,2);
    }

    void jump(const sf::Time &elapsed){
        float dt = elapsed.asSeconds();
        int g = 10;
        t_falling += dt;
        var_y_speed_ = - 0.5 * g  * y_speed_ * dt;
        //move(0, - 5 * y_speed_ * elapsed.asSeconds() + 0.5 * g * pow(t_falling,2));
    }

    void reset_state(){
        //jumping_ = state;
        t_falling = 0.0;
        var_y_speed_ = 0;
    }

    //bool get_state(){
        //return jumping_;
    //}

    void animate(const sf::Time &elapsed){
        //bouncce();
        float dt = elapsed.asSeconds();
        t_ = t_ + dt;

        if(t_ > 1.0/fps_){
            fragments_index++;
            t_ = 0.0;
        }

        if(fragments_index == running_frames.size()){
            fragments_index = 0;
        }

        // based on dt and fps_ fins fragments_index here
        setTextureRect(running_frames[fragments_index]);
        //move(x_speed_*dt,y_speed_*dt);
    }

    void moveInDirection(const sf::Time &elapsed, const sf::Keyboard::Key &key, const std::vector<sf::Sprite> &obstacles)
     {
        animate(elapsed);
        sf::FloatRect rectangle_bounds = getGlobalBounds();
      bool top=0, left=0, bottom=0, right=0;


      for(auto &obstacle : obstacles)
      {
       if(Collision_T(obstacle) == 1){top = 1;}
       if(Collision_L(obstacle) == 1){left = 1;}
       if(Collision_B(obstacle) == 1){bottom = 1;}
       if(Collision_R(obstacle) == 1){right = 1;}
      }

      if(sf::Keyboard::isKeyPressed(sf::Keyboard::Right) && rectangle_bounds.left + rectangle_bounds.width < r_bound_ && right != true)
       {
        move(x_speed_*elapsed.asSeconds(), var_y_speed_);
       } else if(sf::Keyboard::isKeyPressed(sf::Keyboard::Left) && rectangle_bounds.left > l_bound_ && left != true)
       {
        move(-x_speed_*elapsed.asSeconds(), var_y_speed_);
       } else {
          move(0, var_y_speed_);
      }
     }

    void setBounds(const float& l_bound, const float& r_bound,const float& u_bound,const float& d_bound){
        l_bound_  = l_bound  ;
        r_bound_  = r_bound  ;
        u_bound_  = u_bound  ;
        d_bound_  = d_bound  ;
    }

    void add_animation_frame(const sf::IntRect& frame){
        //add animation frames to vector
        running_frames.emplace_back(frame);
    }

    bool Collision_T(sf::Sprite wall)
     {
      sf::FloatRect guy_bounds = getGlobalBounds();
      sf::FloatRect wall_bounds = wall.getGlobalBounds();

      if ((guy_bounds.top+guy_bounds.height >= wall_bounds.top-3) && (guy_bounds.top < wall_bounds.top)
      && (guy_bounds.left+guy_bounds.width > wall_bounds.left+3) && (guy_bounds.left < wall_bounds.left+wall_bounds.width-3))
       {
        return 1;
       }
      else{return 0;}
     }

    bool Collision_R(sf::Sprite wall)
     {
      sf::FloatRect guy_bounds = getGlobalBounds();
      sf::FloatRect wall_bounds = wall.getGlobalBounds();

      if ((guy_bounds.left <= wall_bounds.left+wall_bounds.width+3) && (guy_bounds.left+guy_bounds.width > wall_bounds.left+wall_bounds.width)
       && (guy_bounds.top+guy_bounds.height > wall_bounds.top+3) && (guy_bounds.top < wall_bounds.top+wall_bounds.height-3))
       {
        return 1;
       }
      else{return 0;}
     }

    bool Collision_B(sf::Sprite wall)
     {
      sf::FloatRect guy_bounds = getGlobalBounds();
      sf::FloatRect wall_bounds = wall.getGlobalBounds();

      if ((guy_bounds.top <= wall_bounds.top + wall_bounds.height+3) && (guy_bounds.top+guy_bounds.height > wall_bounds.top+wall_bounds.height)
       && (guy_bounds.left+guy_bounds.width > wall_bounds.left+3) && (guy_bounds.left < wall_bounds.left+wall_bounds.width-3))
       {
        return 1;
       }
      else{return 0;}
     }

    bool Collision_L(sf::Sprite wall)
     {
      sf::FloatRect guy_bounds = getGlobalBounds();
      sf::FloatRect wall_bounds = wall.getGlobalBounds();

      if ((guy_bounds.left+guy_bounds.width >= wall_bounds.left-3) && (guy_bounds.left < wall_bounds.left)
       && (guy_bounds.top+guy_bounds.height > wall_bounds.top+3) && (guy_bounds.top < wall_bounds.top+wall_bounds.height-3))
       {
        return 1;
       }
      else{return 0;}
     }

private:
    sf::Texture texture_;
    int fps_;
    int x_speed_ = 0 ;
    int y_speed_ = 0 ;
    float var_y_speed_ = 0;
    //bool jumping_ = 0;
    int ro_speed_ = 0 ;
    float l_bound_ = 0;
    float r_bound_ = 0;
    float u_bound_ = 0;
    float d_bound_ = 0;
    float t_ = 0.0;
    float t_falling = 0.0;
    unsigned int fragments_index = 0;
    std::vector<sf::IntRect> running_frames;

    void bouncce(){
        sf::FloatRect rectangle_bounds = getGlobalBounds();

        if(rectangle_bounds.top <= u_bound_){
            y_speed_ = abs(y_speed_);
        }

        if(rectangle_bounds.top + rectangle_bounds.height >= d_bound_){
            y_speed_ = abs(y_speed_) * -1;
        }

        if(rectangle_bounds.left <= l_bound_ ){
           x_speed_ = abs(x_speed_);
        }

        if(rectangle_bounds.left + rectangle_bounds.width >= r_bound_){
            x_speed_ = abs(x_speed_) * -1;
        }
    }
};
int main()
{
    sf::RenderWindow window(sf::VideoMode(800, 600), "Platformer"); // create the window

    sf::Clock clock;

    sf::Texture tex_grass, tex_platform, texture_guy;

    sf::Sprite grass; //grass def
    if (!tex_grass.loadFromFile("grass.png")) {
        std::cerr << "Could not load texture" << std::endl;
        return 1;
    } else {
        tex_grass.setRepeated(true);
        grass.setTexture(tex_grass);
        grass.setScale(.5,.5);
        grass.setTextureRect(sf::IntRect(0, 0, window.getSize().x/.5, window.getSize().y/.5));
    }

    sf::Sprite platform; //platform def
    std::vector<sf::Sprite> platforms;
    if (!tex_platform.loadFromFile("wall.png")) {
        std::cerr << "Could not load texture" << std::endl;
        return 1;
    }
    else{
        tex_platform.setRepeated(true);
        platform.setTexture(tex_platform);
        platform.setScale(.5,.5);
        platform.setPosition(0,window.getSize().y-120);
        platform.setTextureRect(sf::IntRect(0, 0, window.getSize().x/.5, 120/.5));
        platforms.push_back(platform);
    }

    AnimatedSprite hero(10, "C:\\Users\\boukh\\OneDrive\\Bureau\\Character\\character.png");
    hero.setBounds(0, window.getSize().x, 0, window.getSize().y);
    hero.setSpeed(100,100,10);
    hero.setPosition(20,120);
    hero.setScale(2.0,2.0);


    //hero.add_animation_frame(sf::IntRect(0, 0, 50, 37)); // hero standing frame 1
    //hero.add_animation_frame(sf::IntRect(50, 0, 50, 37)); // hero standing frame 2
    //hero.add_animation_frame(sf::IntRect(100, 0, 50, 37)); // hero standing frame 3
    hero.add_animation_frame(sf::IntRect(150, 0, 50, 37)); // hero running frame 1
    hero.add_animation_frame(sf::IntRect(200, 0, 50, 37)); // hero running frame 1
    hero.add_animation_frame(sf::IntRect(250, 0, 50, 37)); // hero running frame 1
    hero.add_animation_frame(sf::IntRect(300, 0, 50, 37)); // hero running frame 1
    hero.add_animation_frame(sf::IntRect(350, 0, 50, 37)); // hero running frame 1
    hero.add_animation_frame(sf::IntRect(400, 0, 50, 37)); // hero running frame 1

    //---------------------------------------------------------------------------------

    while (window.isOpen()) {

        sf::Time elapsed = clock.restart();
        sf::Event event;
        while (window.pollEvent(event)) {
            if (event.type == sf::Event::Closed)
                window.close();
        }
        window.clear(sf::Color::Black);

        //hero.moveInDirection(elapsed, event.key.code, platforms);

        if(event.type == sf::Event::KeyReleased)
            {
                if(event.key.code == sf::Keyboard::Space){
                    //hero.jump(elapsed);
                }
        }

        if(sf::Keyboard::isKeyPressed(sf::Keyboard::Space)){
            if (hero.Collision_T(platform))
                hero.jump(elapsed);
        } else {
            if(!hero.Collision_T(platform))
                hero.fall(elapsed);
            else
                hero.reset_state();
        }

        hero.moveInDirection(elapsed, event.key.code, platforms);
        //std::cout<<hero.get_state() << "\t" << hero.Collision_T(platform) <<std::endl;

        window.draw(grass);
        for (auto &p : platforms){
            window.draw(p);
        }
        window.draw(hero);

        window.display();
    }

    return 0;
}
